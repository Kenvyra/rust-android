From 815a83e4feaeac25f2b2866a33300725a3705692 Mon Sep 17 00:00:00 2001
From: David LeGare <legare@google.com>
Date: Thu, 12 May 2022 20:46:00 +0000
Subject: [PATCH] Add Trusty OS support to Rust std

Updated 2022-08-08 for Rust 1.63.0

Change-Id: I4cb07d9b8f64131673bf4cf7482847a6fab5b876
---
 .../src/spec/aarch64_unknown_trusty.rs        | 27 ++++++
 .../src/spec/armv7_unknown_trusty.rs          | 32 ++++++++
 compiler/rustc_target/src/spec/mod.rs         |  3 +
 library/core/src/ffi/mod.rs                   |  1 +
 library/std/build.rs                          |  1 +
 library/std/src/sys/mod.rs                    |  3 +
 library/std/src/sys/trusty/mod.rs             | 44 ++++++++++
 library/std/src/sys/trusty/stdio.rs           | 82 +++++++++++++++++++
 .../std/src/sys/trusty/thread_local_key.rs    | 27 ++++++
 library/std/src/sys_common/mod.rs             |  1 +
 10 files changed, 221 insertions(+)
 create mode 100644 compiler/rustc_target/src/spec/aarch64_unknown_trusty.rs
 create mode 100644 compiler/rustc_target/src/spec/armv7_unknown_trusty.rs
 create mode 100644 library/std/src/sys/trusty/mod.rs
 create mode 100644 library/std/src/sys/trusty/stdio.rs
 create mode 100644 library/std/src/sys/trusty/thread_local_key.rs

diff --git a/compiler/rustc_target/src/spec/aarch64_unknown_trusty.rs b/compiler/rustc_target/src/spec/aarch64_unknown_trusty.rs
new file mode 100644
index 00000000000..b7cc9549eff
--- /dev/null
+++ b/compiler/rustc_target/src/spec/aarch64_unknown_trusty.rs
@@ -0,0 +1,27 @@
+// Trusty OS target for AArch64.
+
+use super::{PanicStrategy, Target, TargetOptions, RelroLevel, crt_objects::LinkSelfContainedDefault};
+
+pub fn target() -> Target {
+    Target {
+        llvm_target: "aarch64-unknown-unknown-musl".into(),
+        pointer_width: 64,
+        data_layout: "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128".into(),
+        arch: "aarch64".into(),
+        options: TargetOptions {
+            features: "+neon,+fp-armv8,+reserve-x18".into(),
+            executables: true,
+            max_atomic_width: Some(128),
+            panic_strategy: PanicStrategy::Abort,
+            os: "trusty".into(),
+            link_self_contained: LinkSelfContainedDefault::Musl,
+            static_position_independent_executables: true,
+            crt_static_default: true,
+            crt_static_respected: false,
+            dynamic_linking: false,
+            relro_level: RelroLevel::Full,
+            mcount: "\u{1}_mcount".into(),
+            ..Default::default()
+        },
+    }
+}
diff --git a/compiler/rustc_target/src/spec/armv7_unknown_trusty.rs b/compiler/rustc_target/src/spec/armv7_unknown_trusty.rs
new file mode 100644
index 00000000000..f2a8277aa9b
--- /dev/null
+++ b/compiler/rustc_target/src/spec/armv7_unknown_trusty.rs
@@ -0,0 +1,32 @@
+use crate::spec::{Target, TargetOptions};
+
+use super::{PanicStrategy, RelroLevel, crt_objects::LinkSelfContainedDefault};
+
+pub fn target() -> Target {
+    Target {
+        // It's important we use "gnueabi" and not "musleabi" here. LLVM uses it
+        // to determine the calling convention and float ABI, and it doesn't
+        // support the "musleabi" value.
+        llvm_target: "armv7-unknown-unknown-gnueabi".into(),
+        pointer_width: 32,
+        data_layout: "e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64".into(),
+        arch: "arm".into(),
+        options: TargetOptions {
+            abi: "eabi".into(),
+            features: "+v7,+thumb2,+soft-float,-neon,+reserve-x18".into(),
+            max_atomic_width: Some(64),
+            mcount: "\u{1}mcount".into(),
+            os: "trusty".into(),
+            link_self_contained: LinkSelfContainedDefault::Musl,
+            dynamic_linking: false,
+            executables: true,
+            crt_static_default: true,
+            crt_static_respected: false,
+            relro_level: RelroLevel::Full,
+            panic_strategy: PanicStrategy::Abort,
+            static_position_independent_executables: true,
+
+            ..Default::default()
+        },
+    }
+}
diff --git a/compiler/rustc_target/src/spec/mod.rs b/compiler/rustc_target/src/spec/mod.rs
index ba4b89c9ea1..b33e94fa2a3 100644
--- a/compiler/rustc_target/src/spec/mod.rs
+++ b/compiler/rustc_target/src/spec/mod.rs
@@ -1198,6 +1198,9 @@ fn $module() {
     ("aarch64-unknown-hermit", aarch64_unknown_hermit),
     ("x86_64-unknown-hermit", x86_64_unknown_hermit),
 
+    ("armv7-unknown-trusty", armv7_unknown_trusty),
+    ("aarch64-unknown-trusty", aarch64_unknown_trusty),
+
     ("riscv32i-unknown-none-elf", riscv32i_unknown_none_elf),
     ("riscv32im-unknown-none-elf", riscv32im_unknown_none_elf),
     ("riscv32imc-unknown-none-elf", riscv32imc_unknown_none_elf),
diff --git a/library/core/src/ffi/mod.rs b/library/core/src/ffi/mod.rs
index b73abbbaca7..8a4249e2617 100644
--- a/library/core/src/ffi/mod.rs
+++ b/library/core/src/ffi/mod.rs
@@ -147,6 +147,7 @@ mod c_char_definition {
                 target_os = "fuchsia",
                 any(target_arch = "aarch64", target_arch = "riscv64")
             ),
+            all(target_os = "trusty", any(target_arch = "aarch64", target_arch = "arm")),
             all(target_os = "nto", target_arch = "aarch64"),
             target_os = "horizon"
         ))] {
diff --git a/library/std/build.rs b/library/std/build.rs
index 0fb03c8e88a..19dab58418b 100644
--- a/library/std/build.rs
+++ b/library/std/build.rs
@@ -24,6 +24,7 @@ fn main() {
         || target.contains("fuchsia")
         || (target.contains("sgx") && target.contains("fortanix"))
         || target.contains("hermit")
+        || target.contains("trusty")
         || target.contains("l4re")
         || target.contains("redox")
         || target.contains("haiku")
diff --git a/library/std/src/sys/mod.rs b/library/std/src/sys/mod.rs
index c72be13804d..1f49d0268a4 100644
--- a/library/std/src/sys/mod.rs
+++ b/library/std/src/sys/mod.rs
@@ -37,6 +37,9 @@
     } else if #[cfg(target_os = "hermit")] {
         mod hermit;
         pub use self::hermit::*;
+    } else if #[cfg(target_os = "trusty")] {
+        mod trusty;
+        pub use self::trusty::*;
     } else if #[cfg(target_os = "wasi")] {
         mod wasi;
         pub use self::wasi::*;
diff --git a/library/std/src/sys/trusty/mod.rs b/library/std/src/sys/trusty/mod.rs
new file mode 100644
index 00000000000..1bffb9fca7e
--- /dev/null
+++ b/library/std/src/sys/trusty/mod.rs
@@ -0,0 +1,44 @@
+//! System bindings for the Trusty OS.
+
+#[path = "../unix/alloc.rs"]
+pub mod alloc;
+#[path = "../unsupported/args.rs"]
+pub mod args;
+#[path = "../unix/cmath.rs"]
+pub mod cmath;
+#[path = "../unsupported/env.rs"]
+pub mod env;
+#[path = "../unsupported/fs.rs"]
+pub mod fs;
+#[path = "../unsupported/io.rs"]
+pub mod io;
+#[path = "../unsupported/net.rs"]
+pub mod net;
+#[path = "../unsupported/os.rs"]
+pub mod os;
+#[path = "../unix/os_str.rs"]
+pub mod os_str;
+#[path = "../unix/path.rs"]
+pub mod path;
+#[path = "../unsupported/pipe.rs"]
+pub mod pipe;
+#[path = "../unsupported/process.rs"]
+pub mod process;
+pub mod stdio;
+#[cfg(target_thread_local)]
+#[path = "../unsupported/thread_local_dtor.rs"]
+pub mod thread_local_dtor;
+pub mod thread_local_key;
+#[path = "../unsupported/time.rs"]
+pub mod time;
+#[path = "../unsupported/locks/mod.rs"]
+pub mod locks;
+#[path = "../unsupported/once.rs"]
+pub mod once;
+#[path = "../unsupported/thread.rs"]
+pub mod thread;
+#[path = "../unsupported/common.rs"]
+#[deny(unsafe_op_in_unsafe_fn)]
+mod common;
+
+pub use common::*;
diff --git a/library/std/src/sys/trusty/stdio.rs b/library/std/src/sys/trusty/stdio.rs
new file mode 100644
index 00000000000..3f7c9f76e71
--- /dev/null
+++ b/library/std/src/sys/trusty/stdio.rs
@@ -0,0 +1,82 @@
+use crate::io;
+
+pub struct Stdin;
+pub struct Stdout;
+pub struct Stderr;
+
+impl Stdin {
+    pub const fn new() -> Stdin {
+        Stdin
+    }
+}
+
+impl io::Read for Stdin {
+    fn read(&mut self, _buf: &mut [u8]) -> io::Result<usize> {
+        Ok(0)
+    }
+}
+
+impl Stdout {
+    pub const fn new() -> Stdout {
+        Stdout
+    }
+}
+
+impl io::Write for Stdout {
+    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {
+        _write(libc::STDOUT_FILENO, buf)
+    }
+
+    fn flush(&mut self) -> io::Result<()> {
+        Ok(())
+    }
+}
+
+impl Stderr {
+    pub const fn new() -> Stderr {
+        Stderr
+    }
+}
+
+impl io::Write for Stderr {
+    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {
+        _write(libc::STDERR_FILENO, buf)
+    }
+
+    fn flush(&mut self) -> io::Result<()> {
+        Ok(())
+    }
+}
+
+pub const STDIN_BUF_SIZE: usize = 0;
+
+pub fn is_ebadf(_err: &io::Error) -> bool {
+    true
+}
+
+pub fn panic_output() -> Option<impl io::Write> {
+    Some(Stderr)
+}
+
+fn _write(fd: i32, message: &[u8]) -> io::Result<usize> {
+    let mut iov =
+        libc::iovec { iov_base: message.as_ptr() as *mut _, iov_len: message.len() };
+    loop {
+        // SAFETY: syscall, safe arguments.
+        let ret = unsafe { libc::writev(fd, &iov, 1) };
+        if ret < 0 {
+            return Err(io::Error::last_os_error());
+        }
+        let ret = ret as usize;
+        if ret > iov.iov_len {
+            return Err(io::Error::last_os_error());
+        }
+        if ret == iov.iov_len {
+            return Ok(message.len());
+        }
+        // SAFETY: ret has been checked to be less than the length of
+        // the buffer
+        iov.iov_base = unsafe { iov.iov_base.add(ret) };
+        iov.iov_len -= ret;
+    }
+}
diff --git a/library/std/src/sys/trusty/thread_local_key.rs b/library/std/src/sys/trusty/thread_local_key.rs
new file mode 100644
index 00000000000..5a1ded7bf91
--- /dev/null
+++ b/library/std/src/sys/trusty/thread_local_key.rs
@@ -0,0 +1,27 @@
+use crate::ptr;
+
+pub type Key = usize;
+type Dtor = unsafe extern "C" fn(*mut u8);
+
+static mut STORAGE: crate::vec::Vec<(*mut u8, Option<Dtor>)> = Vec::new();
+
+#[inline]
+pub unsafe fn create(dtor: Option<Dtor>) -> Key {
+    let key = STORAGE.len();
+    STORAGE.push((ptr::null_mut(), dtor));
+    key
+}
+
+#[inline]
+pub unsafe fn set(key: Key, value: *mut u8) {
+    STORAGE[key].0 = value;
+}
+
+#[inline]
+pub unsafe fn get(key: Key) -> *mut u8 {
+    STORAGE[key].0
+}
+
+#[inline]
+pub unsafe fn destroy(_key: Key) {
+}
diff --git a/library/std/src/sys_common/mod.rs b/library/std/src/sys_common/mod.rs
index e9c727cbbd1..773300acd4c 100644
--- a/library/std/src/sys_common/mod.rs
+++ b/library/std/src/sys_common/mod.rs
@@ -44,6 +44,7 @@
 
 cfg_if::cfg_if! {
     if #[cfg(any(target_os = "l4re",
+                 target_os = "trusty",
                  feature = "restricted-std",
                  all(target_family = "wasm", not(target_os = "emscripten")),
                  all(target_vendor = "fortanix", target_env = "sgx")))] {
-- 
2.40.1

